let fetch,semver,hasYarn,outdatedPackage;_ab9‍.x([["default",()=>checkForUpdates]]);_ab9‍.w("node-fetch",[["default",["fetch"],function(v){fetch=v}]]);_ab9‍.w("semver",[["default",["semver"],function(v){semver=v}]]);_ab9‍.w("yarn-or-npm",[["hasYarn",["hasYarn"],function(v){hasYarn=v}]]);_ab9‍.w("../ui/messages/warnings/outdatedPackage",[["default",["outdatedPackage"],function(v){outdatedPackage=v}]]);





const rejectIn = ms => new Promise((_, reject) => setTimeout(reject, ms));
const withTimeout = (promise, ms) => Promise.race([promise, rejectIn(ms)]);

               async function checkForUpdates(ctx) {
  if (!semver.valid(ctx.pkg.version)) {
    ctx.log.warn(`Invalid semver version in package.json: ${ctx.pkg.version}`);
    return;
  }

  let latestVersion;
  try {
    // If not fetched within 5 seconds, nevermind.
    const res = await withTimeout(fetch(`https://registry.npmjs.org/${ctx.pkg.name}`), 5000);
    const { 'dist-tags': distTags = {} } = await res.json();
    if (!semver.valid(distTags.latest)) {
      ctx.log.warn(`Invalid dist-tag 'latest' returned from registry; skipping update check`);
      return;
    }
    latestVersion = distTags.latest;
  } catch (e) {
    ctx.log.warn(`Could not retrieve package info from registry; skipping update check`);
    ctx.log.debug(e);
    return;
  }

  if (semver.major(ctx.pkg.version) < semver.major(latestVersion)) {
    ctx.log.warn(outdatedPackage(ctx, latestVersion, hasYarn));
  }
}
